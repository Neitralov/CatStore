openapi: 3.0.0
info:
  description: "Cat store WebAPI."
  version: 0.1.0
  title: CatStore.WebAPI
  contact:
    email: example@gmail.com
  license:
    name: MIT
    url: https://github.com/Neitralov/CatStore/blob/master/LICENSE
    
servers:
  - url: http://localhost:8000
  
tags:
  - name: Cats
    description: Everything about Cats
  - name: Users
    description: Our clients
  - name: CartItems
    description: Users cart items
  - name: Orders
    description: Users orders
  
paths:
  /api/cats:
    post:
      tags:
        - Cats
      summary: Добавить нового кота в магазин
      description: "Требуется роль (админ)"
      operationId: addCat
      security:
        - bearer: []
      requestBody:
        $ref: "#/components/requestBodies/CreateCatRequest"
      responses:
        "201":
          $ref: "#/components/responses/CatResponse"
        "400":
          description: Неправильная длина имени, цвет указан в некорректном формате, цена указана некорректно, кот с таким именем уже существует
        "401": 
          description: Unauthorized
        "403":
          description: Forbidden
    get:
      tags: 
        - Cats
      summary: Получить всех котов из магазина
      description: " "
      operationId: getAllCats
      responses:
        "200":
          $ref: "#/components/responses/CatArrayResponse"
  /api/cats/{catId}:
    get:
      tags:
        - Cats
      summary: Получить данные о коте из магазина
      description: " "
      operationId: getCat
      parameters:
        - name: catId
          in: path
          description: Guid кота, которого нужно найти
          required: true
          schema:
            type: string
            format: guid
      responses:
        "200":
          $ref: "#/components/responses/CatResponse"
        "404":
          description: Not found
    put:
      tags:
        - Cats
      summary: Обновить данные существующего кота
      description: "Требуется роль (админ)"
      operationId: updateCat
      security:
        - bearer: []
      parameters:
        - name: catId
          in: path
          description: Guid кота, которого нужно обновить
          required: true
          schema:
            type: string
            format: guid        
      requestBody:
        $ref: "#/components/requestBodies/UpdateCatRequest"
      responses:
        "204":
          description: Данные успешно обновлены
        "400":
          description: Неправильная длина имени, цвет указан в некорректном формате, цена указана некорректно, кот с таким именем уже существует
        "401": 
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
    delete:
      tags:
        - Cats
      summary: Удалить кота из магазина
      description: "Требуется роль (админ)"
      operationId: deleteCat
      security:
        - bearer: []
      parameters:
        - name: catId
          in: path
          description: Guid кота, которого нужно удалить
          required: true
          schema:
            type: string
            format: guid
      responses:
        "204":
          description: Кот удален успешно
        "401": 
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not found
  /api/users:
    post:
      tags:
        - Users
      summary: Зарегистрировать новый аккаунт
      description: " "
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/CreateUserRequest"
      responses:
        "204":
          description: Регистрация прошла успешно
        "400":
          description: Некорректный адрес электронной почты, слишком короткий пароль, пароли не совпадают, пользователь с такой электронной почтой уже существует 
  /api/users/login:
    post:
      tags:
        - Users
      summary: Войти в аккаунт
      description: " "
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginUserRequest"
      responses:
        "200":
          $ref: "#/components/responses/LoginUserResponse"
        "400":
          description: Логин или пароль указан некорректно
  /api/users/change-password:
    patch:
      tags:
        - Users
      summary: Сменить пароль текущего пользователя
      description: " "
      operationId: changeUserPassword
      security:
        - bearer: []
      requestBody:
        $ref: "#/components/requestBodies/ChangeUserPasswordRequest"
      responses:
        "204":
          description: Пароль успешно изменен
        "400":
          description: Слишком короткий пароль, пароли не совпадают, новый пароль не может совпадать со старым
        "401": 
          description: Unauthorized
  /api/users/refresh-tokens:
    post:
      tags:
        - Users
      summary: Обновить access и refresh токен
      description: " "
      operationId: refresh-tokens
      parameters:
        - name: access token
          in: header
          description: access token, выданный при авторизации или последнем обновлении токенов
          required: true
          schema:
            type: string
            format: string
        - name: refresh token
          in: cookie
          description: refresh token, выданный при авторизации или последнем обновлении токенов
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          $ref: "#/components/responses/LoginUserResponse"
        "400":
          description: Срок действия refresh токена истек, refresh токен недействителен
  /api/cart-items:
    post:
      tags:
        - CartItems
      summary: Добавить товар в корзину пользователя
      description: " "
      operationId: addItemToCart
      security:
        - bearer: []
      requestBody:
        $ref: "#/components/requestBodies/CreateCartItemRequest"
      responses:
        "204":
          description: Товар успешно добавлен в корзину
        "400":
          description: У товара указано количество меньше единицы
        "401": 
          description: Unauthorized
        "404":
          description: Not found
    get:
      tags:
        - CartItems
      summary: Получить список всех товаров в корзине пользователя
      description: " "
      operationId: getAllCartItems
      security:
        - bearer: []
      responses:
        "200":
          $ref: "#/components/responses/CartItemArrayResponse"
        "401": 
          description: Unauthorized
  /api/cart-items/{catId}:
    delete:
      tags:
        - CartItems
      summary: Удалить товар из корзины пользователя
      description: " "
      operationId: removeCartItem
      security:
        - bearer: []
      parameters:
        - name: catId
          in: path
          description: Guid кота, которого нужно удалить из корзины
          required: true
          schema:
            type: number
      responses:
        "204":
          description: Товар удален успешно
        "401": 
          description: Unauthorized
        "404":
          description: Not found
  /api/cart-items/update-quantity:
    patch:
      tags:
        - CartItems
      summary: Изменить количество штук товара из корзины пользователя
      description: " "
      operationId: updateCartItemQuantity
      security:
        - bearer: []
      requestBody:
        $ref: "#/components/requestBodies/UpdateCartItemQuantityRequest"
      responses:
        "204":
          description: Количество товара успешно обновлено
        "400":
          description: У товара указано количество меньше единицы
        "401": 
          description: Unauthorized
        "404":
          description: Not found
  /api/cart-items/count:
    get:
      tags:
        - CartItems
      summary: Получить количество всех товаров в корзине пользователя
      description: " "
      operationId: getCartItemsCount
      security:
        - bearer: []
      responses:
        "200":
          $ref: "#/components/responses/TotalNumberOfCartItemsResponse"
        "401": 
          description: Unauthorized
  /api/orders:
    post:
      tags:
        - Orders
      summary: Оформить заказ пользователя
      description: "Заказ будет сформирован на основе товаров из корзины. После этого действия корзина будет очищена."
      operationId: placeOrder
      security:
        - bearer: []
      responses:
        "201":
          $ref: "#/components/responses/OrderDetailsResponse"
        "400":
          description: Заказ не содержит товаров, стоимость заказа некорректна
        "401": 
          description: Unauthorized
        "404":
          description: Не удается найти товар в магазине, чтобы сформировать заказ
    get:
      tags:
        - Orders
      summary: Получить список заказов пользователя
      description: " "
      operationId: getOrders
      security:
        - bearer: []
      responses:
        "200":
          $ref: "#/components/responses/OrdersArrayResponse"
        "401": 
          description: Unauthorized
  /api/orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Получить подробный отчет по заказу пользователя
      description: " "
      operationId: getOrderDetails
      security:
        - bearer: []
      parameters:
        - name: orderId
          in: path
          description: Guid заказа, по которому нужно получить отчет
          required: true
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/OrderDetailsResponse"
        "401": 
          description: Unauthorized
        "404":
          description: Not found         
              
components:
  requestBodies:
    CreateCatRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCatRequest"
      description: CreateCatRequest
      required: true
    UpdateCatRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateCatRequest"
      description: UpdateCatRequest
      required: true
    CreateUserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserRequest"
      description: CreateUserRequest
      required: true
    LoginUserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginUserRequest"
      description: LoginUserRequest
      required: true
    ChangeUserPasswordRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ChangeUserPasswordRequest"
      description: ChangeUserPasswordRequest
      required: true
    CreateCartItemRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCartItemRequest"
      description: CreateCartItemRequest
      required: true
    UpdateCartItemQuantityRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdateCartItemQuantityRequest"
      description: UpdateCartItemQuantityRequest
      required: true
  responses:
    CatResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CatResponse"
      description: CatResponse 
    CatArrayResponse:
      content:
        application/json:            
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CatResponse"
      description: Список котов
    LoginUserResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginUserResponse"
      headers:
        Set-Cookie:
          schema:
            $ref: "#/components/schemas/RefreshTokenSchema"
          description: "refresh token"
      description: Вход произведен успешно
    CartItemArrayResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CartItemResponse"
      description: Список товаров из корзины пользователя
    TotalNumberOfCartItemsResponse:
      content:
        applications/json:
          schema:
            $ref: "#/components/schemas/TotalNumberOfCartItemsResponse"
      description: Количество всех товаров в корзине пользователя
    OrdersArrayResponse:
      content:
        applications/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderResponse"
      description: Список заказов
    OrderDetailsResponse:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/OrderDetailsResponse"
      description: Отчет по заказу
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    CatResponse:
      type: object
      properties:
        catId:
          type: string
          format: guid
        name:
          type: string
          nullable: true
        skinColor:
          type: string
          pattern: "#[0-9a-f]{6}$"
          nullable: true
        eyeColor:
          type: string
          pattern: "#[0-9a-f]{6}$"
          nullable: true
        isMale:
          type: boolean
          default: false
        cost:
          type: number
          format: decimal
    CreateCatRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        skinColor:
          type: string
          pattern: "#[0-9a-f]{6}$"
          nullable: true
        eyeColor:
          type: string
          pattern: "#[0-9a-f]{6}$"
          nullable: true
        isMale:
          type: boolean
          default: false
        cost:
          type: number
          format: decimal
    UpdateCatRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        skinColor:
          type: string
          nullable: true
        eyeColor:
          type: string
          nullable: true
        isMale:
          type: boolean
          default: false
        cost:
          type: number
          format: decimal
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
        confirmPassword: 
          type: string
          format: password
    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
    LoginUserResponse:
      type: object
      properties:
        token:
          type: string
    RefreshTokenSchema:
      type: string
      format: string
    ChangeUserPasswordRequest:
      type: object
      properties:
        oldPassword: 
          type: string
          format: password
        newPassword: 
          type: string
          format: password
        confirmNewPassword: 
          type: string
          format: password
    CreateCartItemRequest:
      type: object
      properties:
        catId:
          type: string
          format: guid
    CartItemResponse:
      type: object
      properties:
        catId:
          type: string
          format: guid
        quantity:
          type: number
    UpdateCartItemQuantityRequest:
      type: object
      properties:
        catId:
          type: string
          format: guid
        quantity:
          type: number
    TotalNumberOfCartItemsResponse:
      type: object
      properties:
        count:
          type: number
    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
          format: guid
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: decimal
    OrderDetailsResponse:
      type: object
      properties:
        orderId:
          type: string
          format: guid
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: decimal
        products:
          type: array
          items: 
            $ref: "#/components/schemas/OrderDetailsCatResponse"
    OrderDetailsCatResponse:
      type: object
      properties:
        productId:
          type: string
          format: guid
        quantity:
          type: number
        totalPrice:
          type: number
          format: decimal