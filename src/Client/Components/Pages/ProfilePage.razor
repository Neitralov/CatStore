@page "/profile"
@layout ProfileLayout
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@attribute [Authorize]

<PageTitle>Профиль — CatStore</PageTitle>

<Panel CssClasses="flex flex-col md:gap-3 gap-2">
    <ValueFieldWithLabel Label="Электронная почта">@UserEmail</ValueFieldWithLabel>
    <hr />
    <div class="flex flex-col gap-2">
        <h1>Изменить пароль</h1>
        <InputTextFieldWithLabel CssClasses="text-xs text-muted" Label="Старый пароль" InputType="password" @bind-Value="OldPassword" />
        <InputTextFieldWithLabel CssClasses="text-xs text-muted" Label="Новый пароль" InputType="password" @bind-Value="NewPassword" />
        <InputTextFieldWithLabel CssClasses="text-xs text-muted" Label="Повторите новый пароль" InputType="password" @bind-Value="ConfirmNewPassword" />
        @if (ErrorMessage != string.Empty)
        {
            <p class="text-attention">@ErrorMessage</p>
        }
        <ApplyButton OnClick="ChangePassword">Изменить</ApplyButton>
    </div>
    <hr class="md:hidden" />
    <div class="md:hidden">
        <Button OnClick="Logout">Выйти из аккаунта</Button>
    </div>
</Panel>

@code {
    private string UserEmail { get; set; } = string.Empty;

    private string OldPassword { get; set; } = string.Empty;
    private string NewPassword { get; set; } = string.Empty;
    private string ConfirmNewPassword { get; set; } = string.Empty;

    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        UserEmail = authState.User.Identity?.Name!;
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(OldPassword) ||
            string.IsNullOrEmpty(NewPassword) ||
            string.IsNullOrEmpty(ConfirmNewPassword))
        {
            ClearInputFields();
            ErrorMessage = "Поля не могут быть пустыми";
            return;
        }

        var request = new ChangeUserPasswordRequest(OldPassword, NewPassword, ConfirmNewPassword);
        var response = await HttpClient.PatchAsJsonAsync("/api/users/change-password", request);

        if (response.IsSuccessStatusCode)
        {
            ClearInputFields();
            ErrorMessage = string.Empty;
            await JsRuntime.InvokeVoidAsync("alert", "Пароль успешно изменен");
        }
        else
        {
            ClearInputFields();
            var result = await response.Content.ReadFromJsonAsync<ProblemDetails>();
            ErrorMessage = result!.GetFirstErrorMessage();
        }

        void ClearInputFields()
        {
            OldPassword = string.Empty;
            NewPassword = string.Empty;
            ConfirmNewPassword = string.Empty;
        }
    }
    
    private async Task Logout()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы точно хотите выйти из аккаунта?") is false)
            return;

        await LocalStorage.RemoveItemAsync("AccessToken");
        await LocalStorage.RemoveItemAsync("RefreshToken");

        NavigationManager.NavigateTo("/");
        
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
}