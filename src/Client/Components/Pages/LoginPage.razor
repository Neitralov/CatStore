@page "/login"
@layout EmptyLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CartService CartService

<PageTitle>Авторизация — CatStore</PageTitle>

<div class="xl:container w-full grid grid-cols-12 xl:gap-5 gap-4 content-center grow">
    <Panel CssClasses="xl:col-span-4 col-span-6 xl:col-start-5 col-start-4 flex flex-col gap-3">
        <h1 class="text-xl text-center">Авторизация</h1>
        <InputTextFieldWithLabel Label="Электронная почта" InputType="email" @bind-Value="Email"/>
        <InputTextFieldWithLabel Label="Пароль" InputType="password" @bind-Value="Password" />
        <p class="text-attention">@ErrorMessage</p>
        <div class="flex justify-between gap-3">
            <ApplyButton OnClick="Login">Войти</ApplyButton>
            <Button OnClick="Back">Назад</Button>
        </div>
        <p class="text-xs text-center">Нет аккаунта? <a class="text-primary hover:cursor-pointer hover:underline" href="/register">Регистрация</a></p>
    </Panel>
</div>

@code {
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = string.Empty;

    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;

    private string ErrorMessage { get; set; } = string.Empty;

    private async Task Login()
    {
        if (string.IsNullOrEmpty(Email) ||
            string.IsNullOrEmpty(Password))
        {
            Email = string.Empty;
            Password = string.Empty;
            ErrorMessage = "Все поля должны быть заполнены";
            return;
        }

        var request = new LoginUserRequest(Email, Password);
        var response = await HttpClient.PostAsJsonAsync("/api/users/login", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginUserResponse>();

            await LocalStorage.SetItemAsStringAsync("AccessToken", result?.AccessToken!);
            await LocalStorage.SetItemAsStringAsync("RefreshToken", result?.RefreshToken!);

            await AuthenticationStateProvider.GetAuthenticationStateAsync();

            await CartService.StoreCartItemsFromLocalCart();
            
            if (ReturnUrl is null)
                NavigationManager.NavigateTo("/");
            else
                NavigationManager.NavigateTo(ReturnUrl.StartsWith('/') ? ReturnUrl : "/");

        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<ProblemDetails>();
            ErrorMessage = result!.GetFirstErrorMessage();

            Email = string.Empty;
            Password = string.Empty;
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/");
    }
}